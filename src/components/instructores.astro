---
// src/components/QuienesSomosSection.astro
const fotos = [
{
  id: 1,
  src: "/img/myname.png",
  alt: "Juan Cruz enseñando MTB"
},
{
  id: 2,
  src: "/img/myname-2.png",
  alt: "Facundo Arce en la pista"
},
{
  id: 3,
  src: "/img/promax.png",
  alt: "Clases de MTB en acción"
}
];
---

<section id="quienes-somos" class="py-24 bg-white">
<div class="max-w-6xl mx-auto px-6">
  
  <!-- Título -->
  <div class="text-left mb-12">
    <h2 class="section-title text-5xl">
      NOSOTROS
    </h2>
  </div>
  
  <!-- Carrusel responsive -->
  <div class="mb-12">
    <!-- Desktop: Grid de 3 fotos -->
    <div class="hidden md:grid md:grid-cols-3 gap-6">
      {fotos.map((foto) => (
        <div class="relative">
          <img
            src={foto.src || "/placeholder.svg"}
            alt={foto.alt}
            class="w-full h-80 object-cover shadow-md"
          />
        </div>
      ))}
    </div>
    
    <!-- Mobile: Carrusel a pantalla completa -->
    <div class="md:hidden relative -mx-6">
      <div class="carousel-container overflow-hidden">
        <div class="carousel-track flex" id="carousel-track">
          {fotos.map((foto, index) => (
            <div class="carousel-slide flex-shrink-0">
              <img
                src={foto.src || "/placeholder.svg"}
                alt={foto.alt}
                class="w-full h-[70vh] object-cover"
              />
              <!-- Overlay oscuro -->
              <div class="absolute inset-0 bg-black/30"></div>
            </div>
          ))}
        </div>
      </div>
      
      <!-- Puntos indicadores -->
      <div class="absolute bottom-6 left-0 right-0 flex justify-center gap-4">
        <div class="carousel-dot active" data-index="0">
          <img src="/img/diamante.svg" alt="Diamante" class="diamond-icon" />
        </div>
        <div class="carousel-dot" data-index="1">
          <img src="/img/diamante.svg" alt="Diamante" class="diamond-icon" />
        </div>
        <div class="carousel-dot" data-index="2">
          <img src="/img/diamante.svg" alt="Diamante" class="diamond-icon" />
        </div>
      </div>
    </div>
  </div>
  
  <!-- Contenido de texto -->
  <div class="max-w-4xl space-y-8">
    <div class="text-left">
      <p class="text-lg text-gray-700 mb-6 leading-relaxed din-text">
        Somos <strong>Juan Cruz</strong> y <strong>Facundo Arce</strong>, dos apasionados del MTB con más de 10 años recorriendo senderos y enseñando a otros a disfrutar de este deporte.
      </p>
      
      <p class="text-lg text-gray-700 mb-6 leading-relaxed din-text">
        Nos dedicamos a enseñar mountain bike desde lo básico hasta técnicas avanzadas, adaptando nuestras clases a cada persona. Creemos que todos pueden experimentar la libertad y adrenalina de rodar sobre dos ruedas, sin importar su edad o experiencia previa.
      </p>
      
      <p class="text-lg text-gray-700 mb-8 leading-relaxed din-text">
        Nuestra filosofía es simple: aprender divirtiéndose y superando límites en un ambiente seguro. Cada clase es una nueva aventura donde combinamos técnica, seguridad y mucha pasión por el MTB.
      </p>
    </div>
    
    <!-- Especialidades -->
    <div class="text-left space-y-4">
      <h3 class="text-xl font-semibold text-gray-900 din-text">Nuestras especialidades:</h3>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div class="flex items-center">
          <span class="w-1.5 h-1.5 bg-black rounded-full mr-3"></span>
          <span class="din-text">Técnicas de equilibrio y control</span>
        </div>
        <div class="flex items-center">
          <span class="w-1.5 h-1.5 bg-black rounded-full mr-3"></span>
          <span class="din-text">Descenso y manejo en terrenos técnicos</span>
        </div>
        <div class="flex items-center">
          <span class="w-1.5 h-1.5 bg-black rounded-full mr-3"></span>
          <span class="din-text">Saltos y obstáculos</span>
        </div>
        <div class="flex items-center">
          <span class="w-1.5 h-1.5 bg-black rounded-full mr-3"></span>
          <span class="din-text">Clases para niños y principiantes</span>
        </div>
      </div>
    </div>
    
    <!-- Botón alineado a la izquierda -->
    <div class="pt-4">
      <button class="custom-button">
        <span>Contactarnos</span>
        <span class="custom-button-arrow"></span>
      </button>
    </div>
  </div>
</div>
</section>

<style>
@font-face {
  font-family: 'Bebas-Regular';
  src: url('/fonts/Bebas-Regular.woff');
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: 'DIN-Regular';
  src: url('/fonts/DIN-Regular.woff2');
  font-weight: normal;
  font-style: normal;
}

.section-title {
  font-family: 'Bebas-Regular', Arial, sans-serif;
  color: #000000;
  font-weight: 100;
}

.din-text {
  font-family: 'DIN-Regular', Arial, sans-serif;
}

.custom-button {
  background: white;
  border: 2px solid black;
  color: black;
  padding: 12px 24px;
  font-family: 'DIN-Regular', Arial, sans-serif;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  transition: all 0.2s ease;
  display: inline-flex;
  align-items: center;
  gap: 12px;
}

.custom-button:hover {
  background: black;
  color: white;
}

.custom-button-arrow::after {
  content: '→';
  font-size: 16px;
  transition: transform 0.2s ease;
}

.custom-button:hover .custom-button-arrow::after {
  transform: translateX(4px);
}

/* Carrusel solo para móvil */
.carousel-container {
  width: 100vw;
  position: relative;
  overflow: hidden;
}

.carousel-track {
  transition: transform 0.3s ease-out;
}

.carousel-slide {
  width: 100vw;
  position: relative;
}

/* Puntos indicadores - Iconos SVG */
.carousel-dot {
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.diamond-icon {
  width: 16px;
  height: 16px;
  transition: all 0.3s ease;
  filter: brightness(0); /* Hace el icono negro */
}

.carousel-dot.active .diamond-icon {
  filter: brightness(0) invert(1); /* Hace el icono blanco */
  transform: scale(1.2);
}
</style>

<script>
// Funcionalidad del carousel solo para móvil
document.addEventListener('DOMContentLoaded', function() {
  // Solo ejecutar en móvil
  if (window.innerWidth >= 768) return;
  
  const track = document.getElementById('carousel-track');
  const dots = document.querySelectorAll('.carousel-dot');
  const container = track?.parentElement;
  
  if (!track || !container) return;
  
  let currentSlide = 0;
  const totalSlides = 3;
  let autoPlayInterval = null;
  const autoPlayDelay = 4000;
  
  // Variables para el control analógico
  let isDragging = false;
  let startX = 0;
  let currentX = 0;
  let initialTransform = 0;
  let containerWidth = 0;
  
  function updateContainerWidth() {
    containerWidth = window.innerWidth; // Usar el ancho de la ventana
    // Asegurar que cada slide tenga exactamente el ancho de la ventana
    const slides = track.querySelectorAll('.carousel-slide');
    slides.forEach(slide => {
      slide.style.width = `${containerWidth}px`;
    });
  }
  
  function updateDots(slideIndex) {
    dots.forEach((dot, index) => {
      if (index === slideIndex) {
        dot.classList.add('active');
      } else {
        dot.classList.remove('active');
      }
    });
  }
  
  function setTrackPosition(position, withTransition = false) {
    if (withTransition) {
      track.style.transition = 'transform 0.3s ease-out';
    } else {
      track.style.transition = 'none';
    }
    track.style.transform = `translateX(${position}px)`;
  }
  
  function snapToSlide(targetSlide) {
    currentSlide = Math.max(0, Math.min(targetSlide, totalSlides - 1));
    const targetPosition = -currentSlide * containerWidth;
    setTrackPosition(targetPosition, true);
    updateDots(currentSlide);
  }
  
  function nextSlide() {
    const nextSlideIndex = (currentSlide + 1) % totalSlides;
    snapToSlide(nextSlideIndex);
  }
  
  function startAutoPlay() {
    stopAutoPlay();
    autoPlayInterval = setInterval(nextSlide, autoPlayDelay);
  }
  
  function stopAutoPlay() {
    if (autoPlayInterval) {
      clearInterval(autoPlayInterval);
      autoPlayInterval = null;
    }
  }
  
  // Configurar los puntos indicadores
  dots.forEach((dot, index) => {
    dot.addEventListener('click', () => {
      snapToSlide(index);
      stopAutoPlay();
      startAutoPlay();
    });
  });
  
  // Touch events
  track.addEventListener('touchstart', (e) => {
    isDragging = true;
    startX = e.touches[0].clientX;
    currentX = startX;
    
    // Obtener la posición actual del transform
    const transform = track.style.transform;
    const match = transform.match(/translateX$$([^)]+)px$$/);
    initialTransform = match ? parseFloat(match[1]) : -currentSlide * containerWidth;
    
    stopAutoPlay();
    updateContainerWidth();
  });
  
  track.addEventListener('touchmove', (e) => {
    if (!isDragging) return;
    
    e.preventDefault(); // Prevenir scroll de la página
    currentX = e.touches[0].clientX;
    const deltaX = currentX - startX;
    const newPosition = initialTransform + deltaX;
    
    // Limitar el movimiento para no ir más allá de los límites
    const maxPosition = 0;
    const minPosition = -(totalSlides - 1) * containerWidth;
    const clampedPosition = Math.max(minPosition, Math.min(maxPosition, newPosition));
    
    setTrackPosition(clampedPosition, false);
  });
  
  track.addEventListener('touchend', (e) => {
    if (!isDragging) return;
    
    isDragging = false;
    const deltaX = currentX - startX;
    const threshold = containerWidth * 0.3; // 30% del ancho para cambiar slide
    
    let targetSlide = currentSlide;
    
    if (Math.abs(deltaX) > threshold) {
      if (deltaX > 0) {
        // Deslizar hacia la derecha - slide anterior
        targetSlide = Math.max(0, currentSlide - 1);
      } else {
        // Deslizar hacia la izquierda - slide siguiente
        targetSlide = Math.min(totalSlides - 1, currentSlide + 1);
      }
    }
    
    snapToSlide(targetSlide);
    startAutoPlay();
  });
  
  // Prevenir el comportamiento por defecto del navegador
  track.addEventListener('touchmove', (e) => {
    e.preventDefault();
  }, { passive: false });
  
  // Manejar cambios de visibilidad
  document.addEventListener('visibilitychange', () => {
    if (document.visibilityState === 'visible') {
      startAutoPlay();
    } else {
      stopAutoPlay();
    }
  });
  
  // Manejar redimensionamiento de ventana
  window.addEventListener('resize', () => {
    // Solo reajustar si seguimos en móvil
    if (window.innerWidth < 768) {
      updateContainerWidth();
      snapToSlide(currentSlide);
    }
  });
  
  // Inicializar
  updateContainerWidth();
  updateDots(0);
  snapToSlide(0);
  startAutoPlay();
});
</script>
